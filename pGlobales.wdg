#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : pGlobales
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x1d35bc0c03ff02ff
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     code : |1-
      
     type : 720896
  procedures :
   -
     name : ValidationReglement
     internal_properties : CAAAAAgAAABLfC+BJbQmgM3HxvCKY6pXNGda2us2rnB4qLVl2Gs0RpSP0rC3UxGSpTngWsp8XWb4hIQ8GUniU/e5Vg3JIdMZGjscAw/gsYmz1x64mUKNxxCJw9BXeFzyB3aNgvvAtdMwvLQyALsqErsCf4uyIJDCOlMAv1w/z6ULFBnI7xEm/lD4NUbUKmcOEdNI+Ve7ulNJGczoxC4bLtq+x1NypUEOIDWjNLE5gVucFENiNG7L2FNDwpis
     procedure_id : 2104795160658313983
     type_code : 15
     code : |1-
      PROCEDURE ValidationReglement(LOCAL nIDClient est un entier sur 8 octets, LOCAL nIDCommande est un entier sur 8 octets)
      
      
      ClientSaaS est un SaaSClient
      AbonnementSaas est un SaaSAbonnement
      UtilisateurAdmin est un SaaSUtilisateur
      cUnUtilisateur est un SaaSUtilisateur
      tabUtilisateurs est un tableau de SaaSUtilisateurs
      
      
      // Chargement de la fiche client
      HLitRecherchePremier(Client, IDClient, nIDClient)
      SI HTrouve(Client) = Faux alors
      	Erreur(<§@1b8bab4900063c190000§>)
      	RENVOYER Faux
      FIN
      
      // Chargement de la commande
      HLitRecherchePremier(Commande, IDCommande, nIDCommande)
      SI HTrouve(Commande) = Faux ALORS
      	Erreur(<§@1b8bab4900063c190001§>)
      	RENVOYER Faux
      FIN
      
      // On met la commande en réglée
      Commande.bEstRéglée = Vrai 
      SI HModifie(Commande) = Faux ALORS
      	Erreur(<§@1b8bab4900063c190002§>)
      	RENVOYER Faux
      FIN
      
      // Recherche le compte client SaaS correspond au client du SI
      ClientSaaS = SaaSAdminChercheClient(Client.Email)
      SI ErreurDétectée ALORS
      	
      	// Création du compte client	
      	ClientSaaS..Nom = Client.Société
      	ClientSaaS..RéférenceExterne = Client.Email
      	
      	// Enregistrement du compte client
      	SI SaaSAdminAjouteClient(ClientSaaS) = Faux ALORS
      		commande.bErreurApresReglement = vrai
      		commande.DétailErreurApresReglement = chaineconstruit(<§@1b8bab4900063c190009§>, ClientSaaS..nom, erreurinfo())
      		hmodifie(commande)
      		RENVOYER Faux
      	FIN
      	
      	// Définit un utilisateur administrateur par défaut
      	UtilisateurAdmin..DroitAdministrateur = Vrai
      	UtilisateurAdmin..Nom = Client.Nom
      	UtilisateurAdmin..Prénom = Client.Prénom
      	// Utilise le même couple login / mot de passe par défaut que le compte client
      	UtilisateurAdmin..Login = Client.Email
      	UtilisateurAdmin..MotDePasse = Client.MotDePasse
      	// Ajoute l'utilisateur au compte
      	SI SaaSAdminAjouteUtilisateur(UtilisateurAdmin, ClientSaaS) = Faux ALORS
      		Commande.bErreurApresReglement = Vrai
      		Commande.DétailErreurApresReglement = chaineconstruit(<§@1b8bab4900063c190004§>, UtilisateurAdmin..Login, ClientSaaS..nom, ErreurInfo())
      		HModifie(Commande)
      		RENVOYER Faux
      	FIN
      	
      SINON
      	
      	// Si le compte client existe, recherche un administrateur avec un login correspondant à l'adresse email
      	tabUtilisateurs = SaaSAdminListeUtilisateur(ClientSaaS)
      	pour tout element cUnUtilisateur de tabUtilisateurs
      		si cUnUtilisateur..Login ~= client.Email _et_ cUnUtilisateur..DroitAdministrateur = vrai ALORS
      			UtilisateurAdmin = cUnUtilisateur
      			sortir
      		FIN
      	FIN
      	
      	// Si aucun utilisateur ne correspond
      	si UtilisateurAdmin..login ~= "" ALORS
      		// Création de l'utilisateur par défaut du site
      		UtilisateurAdmin..DroitAdministrateur = Vrai
      		UtilisateurAdmin..Nom = Client.Nom
      		UtilisateurAdmin..Prénom = Client.Prénom
      		// Utilise le même couple login / mot de passe par défaut que le compte client
      		UtilisateurAdmin..Login = Client.Email
      		UtilisateurAdmin..MotDePasse = Client.MotDePasse
      		
      		SI SaaSAdminAjouteUtilisateur(UtilisateurAdmin, ClientSaaS) = Faux ALORS
      			Commande.bErreurApresReglement = Vrai
      			Commande.DétailErreurApresReglement = ChaîneConstruit(<§@1b8bab4900063c190005§>, UtilisateurAdmin..Login, ClientSaaS..nom, ErreurInfo())
      			hModifie(Commande)
      			RENVOYER Faux
      		FIN	
      		
      	FIN
      
      FIN
      
      // Création de l'abonnement
      AbonnementSaas..DateDébut = Datedujour()
      AbonnementSaas..NbLicences = Commande.NbLicences
      AbonnementSaas..DateFin = Commande.DateFin
      SI SaaSAdminAjouteAbonnement(AbonnementSaas, gTarificationACommander, ClientSaaS) = Faux alors
      	Commande.bErreurApresReglement = Vrai
      	Commande.DétailErreurApresReglement = ChaîneConstruit(<§@1b8bab4900063c190006§>, ClientSaaS..Nom, gTarificationACommander..Nom, ErreurInfo())
      	HModifie(Commande)
      	RENVOYER Faux
      FIN
      
      // Active la licence pour cet utilisateur
      si SaaSAdminActiveLicence(AbonnementSaas, UtilisateurAdmin) = faux ALORS
      	Commande.bErreurApresReglement = Vrai
      	Commande.DétailErreurApresReglement = ChaîneConstruit(<§@1b8bab4900063c190007§>, UtilisateurAdmin..Login, erreurinfo())
      	HModifie(Commande)
      	renvoyer faux
      FIN
      
      
      // Par défaut, l'opération se déroule correctement
      RENVOYER Vrai
     type : 458752
   -
     name : ErreurBloquante
     internal_properties : CAAAAAgAAAAcZxh+BQgKKcbmOy1Kytvu64CsXOpPIX4c9jjVHXi6NwLPQdT5vgTtLHRGkBay5VrwwNzlTmI5k4wYad6kcIRZQ3w6yiRWIxpKUu6iDOUOfT6zGdW9RvOAHHH8/lO8BqejUmEz9Ml1LmCbtrVcsDlYRTM/EvitqL+IdXSGRelHPrZYisLPDlVA1PHTeTx8DUd5xlEs5+w=
     procedure_id : 2105079238329450921
     type_code : 15
     code : |1-
      // Résumé : Affiche un message d'erreur bloquant (serveur SaaS indisponible, pas de site SaaS, ...)
      // Syntaxe :
      //ErreurBloquante (<sMessageErreur> est chaîne)
      //
      // Paramètres :
      //	sMessageErreur (chaîne ANSI) : Texte de l'erreur
      // Valeur de retour :
      // 	Aucune
      //
      PROCEDURE ErreurBloquante(sMessageErreur est une chaine)
      
      // Affiche la chaine en rouge dans le navigateur
      ChaîneAffiche("<html><font color=red>" + sMessageErreur + "</font></html>")
      
      // Fin de programme
      FinProgramme()
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_Collection1
resources :
 string_res :
  identifier : 0x1b8bab4900063c19
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
  strings :
   -
     text :
      fr-FR : Impossible de trouver le compte client
     index : 0
   -
     text :
      fr-FR : Impossible de trouver la commande
     index : 1
   -
     text :
      fr-FR : Impossible de mettre à jour la commande
     index : 2
   -
     text :
      fr-FR : Impossible de créer le compte client
     index : 3
   -
     text :
      fr-FR : "Impossible de créer l'utilisateur par défaut \"%1\" du compte client SaaS \"%2\".\r\n\r\n%3"
     index : 4
   -
     text :
      fr-FR : "Impossible de créer l'utilisateur par défaut \"%1\" du compte client SaaS \"%2\".\r\n\r\n%3"
     index : 5
   -
     text :
      fr-FR : "Impossible de créer l'abonnement du compte client \"%1\" à la tarification \"%2\".\r\n\r\n%3"
     index : 6
   -
     text :
      fr-FR : "Impossible d'activer la licence pour l'utilisateur \"%1\".\r\n\r\n%2"
     index : 7
   -
     text :
      fr-FR : Impossible de se connecter au serveur SaaS "%1".
     index : 8
   -
     text :
      fr-FR : "Impossible de créer le compte client SaaS \"%1\".\r\n\r\n%2"
     index : 9
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
